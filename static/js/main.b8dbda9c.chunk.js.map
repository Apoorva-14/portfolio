{"version":3,"sources":["serviceWorker.ts","theme.ts","components/IntroTexts.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","lightTheme","responsiveFontSizes","createTheme","typography","fontFamily","palette","type","primary","main","grey","background","paper","darkTheme","useStyles","makeStyles","createStyles","title","flexGrow","IntroTexts","useState","isFadeIn","setIsFadeIn","currentSlide","setCurrentSlide","setTimeout","slide","Math","ceil","className","App","darkState","classes","ThemeProvider","theme","AppBar","position","Toolbar","Typography","variant","licenseKey","process","REACT_APP_FULLPAGE_LICENSE","render","Wrapper","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAcoBA,QACW,cAA7BC,OAAOC,SAASC,UAEgB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC1B,2D,qGCZSC,EAAaC,YAAoBC,YAAY,CACxDC,WAAY,CACVC,WAAY,uBAEdC,QAAS,CACPC,KAAM,QACNC,QAAS,CACPC,KAAMC,IAAK,MAEbC,WAAY,CACVC,MAAO,6BAQAC,EAAYX,YAAoBC,YAAY,CACvDC,WAAY,CACVC,WAAY,uBAEdC,QAAS,CACPC,KAAM,OACNC,QAAS,CACPC,KAAM,uBAERE,WAAY,CACVC,MAAO,6BAKAE,EAAYC,aAAW,kBAAMC,YAAa,CACrDC,MAAO,CACLC,SAAU,Q,MCvCC,SAASC,IAAc,IAAD,EACHC,oBAAS,GADN,mBAC5BC,EAD4B,KAClBC,EADkB,OAEKF,mBAAS,IAFd,mBAE5BG,EAF4B,KAEdC,EAFc,KAcnC,OAVAC,YAAW,WACT,IAAMC,EAAQH,EAAe,GAE3BC,EADEE,EAAQ,EACM,GAEAA,GAElBJ,GAAaD,KACZ,MAGD,gCACgC,IAA5BM,KAAKC,KAAKL,GACR,qBAAKM,UAAYR,EAAW,oBAAsB,qBAAlD,qCAGA,KAE0B,IAA5BM,KAAKC,KAAKL,GACR,qBAAKM,UAAYR,EAAW,oBAAsB,qBAAlD,sCAGA,Q,MCnBK,SAASS,IAAO,IAAD,EACMV,oBAAS,GADf,mBACrBW,EADqB,KAEtBC,GAFsB,KAEZlB,KAMhB,OACE,eAACmB,EAAA,EAAD,CAAeC,MAAOH,EAAYlB,EAAYZ,EAA9C,UACE,cAACkC,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKV,UAAWG,EAAQf,MAA5C,oBAQJ,cAAC,IAAD,CACEuB,WAAYC,6IAAYC,2BACxBC,OAAQ,kBACN,eAAC,IAAcC,QAAf,WACE,qBAAKf,UAAU,sBAAf,SACE,cAAC,EAAD,MAEF,qBAAKA,UAAU,6BACf,qBAAKA,UAAU,iCChC3BgB,IAASF,OAAO,cAAC,EAAD,IAASG,SAASC,eAAe,SJoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.b8dbda9c.chunk.js","sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable no-param-reassign */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n  // [::1] is the IPv6 localhost address.\n  || window.location.hostname === '[::1]'\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  || window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n  ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n            + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  createTheme, responsiveFontSizes, makeStyles, createStyles,\n} from '@material-ui/core/styles';\nimport { grey } from '@material-ui/core/colors';\n\n/**\n * Light Theme\n */\nexport const lightTheme = responsiveFontSizes(createTheme({\n  typography: {\n    fontFamily: 'Comic Neue, cursive',\n  },\n  palette: {\n    type: 'light',\n    primary: {\n      main: grey[500],\n    },\n    background: {\n      paper: 'rgba(255,255,255,0.5)',\n    },\n  },\n}));\n\n/**\n * Dark Theme\n */\nexport const darkTheme = responsiveFontSizes(createTheme({\n  typography: {\n    fontFamily: 'Comic Neue, cursive',\n  },\n  palette: {\n    type: 'dark',\n    primary: {\n      main: 'rgba(51, 29, 21, 1)',\n    },\n    background: {\n      paper: 'rgba(66, 66, 66, 0.4)',\n    },\n  },\n}));\n\nexport const useStyles = makeStyles(() => createStyles({\n  title: {\n    flexGrow: 1,\n  },\n}));\n","import './IntroTexts.css';\n\nimport React, { useState } from 'react';\n\nexport default function IntroTexts() {\n  const [isFadeIn, setIsFadeIn] = useState(true);\n  const [currentSlide, setCurrentSlide] = useState(0.5);\n\n  setTimeout(() => {\n    const slide = currentSlide + 0.5;\n    if (slide > 2) {\n      setCurrentSlide(0.5);\n    } else {\n      setCurrentSlide(slide);\n    }\n    setIsFadeIn(!isFadeIn);\n  }, 1500);\n\n  return (\n    <div>\n      { Math.ceil(currentSlide) === 1\n        ? <div className={ isFadeIn ? 'intro-text fadeIn' : 'intro-text fadeOut' }>\n            HI! I AM APOORVA SHARMA\n          </div>\n        : null\n      }\n      { Math.ceil(currentSlide) === 2\n        ? <div className={ isFadeIn ? 'intro-text fadeIn' : 'intro-text fadeOut' }>\n        ASPIRING PRODUCT MANAGER\n      </div>\n        : null\n      }\n    </div>\n  );\n}\n","import ReactFullpage from '@fullpage/react-fullpage';\nimport {\n  AppBar, IconButton, ThemeProvider, Toolbar, Typography,\n} from '@material-ui/core';\nimport { BrightnessHigh, BrightnessLow } from '@material-ui/icons';\nimport React, { useState } from 'react';\nimport { darkTheme, lightTheme, useStyles } from './theme';\nimport Cloud from './components/Cloud';\nimport IntroTexts from './components/IntroTexts';\nimport './App.css';\n\nexport default function App() {\n  const [darkState, setDarkState] = useState(true);\n  const classes = useStyles();\n\n  const handleThemeChange = () => {\n    setDarkState(!darkState);\n  };\n\n  return (\n    <ThemeProvider theme={darkState ? darkTheme : lightTheme}>\n      <AppBar position=\"sticky\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Me\n          </Typography>\n          {/* <IconButton onClick={handleThemeChange}>\n            {darkState ? <BrightnessHigh /> : <BrightnessLow />}\n          </IconButton> */}\n        </Toolbar>\n      </AppBar>\n      <ReactFullpage\n        licenseKey={process.env.REACT_APP_FULLPAGE_LICENSE}\n        render={() => (\n          <ReactFullpage.Wrapper>\n            <div className=\"section banner home\">\n              <IntroTexts />\n            </div>\n            <div className=\"section banner section-1\" />\n            <div className=\"section banner foot\" />\n          </ReactFullpage.Wrapper>\n        )}\n      />\n    </ThemeProvider>\n  );\n}\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}
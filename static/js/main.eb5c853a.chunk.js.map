{"version":3,"sources":["serviceWorker.ts","theme.ts","components/IntroTexts.tsx","assets/images/about.jpeg","hooks/useResponsive.ts","components/About.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","theme","responsiveFontSizes","createTheme","typography","fontFamily","palette","type","primary","main","background","paper","useStyles","makeStyles","createStyles","title","flexGrow","IntroTexts","useState","isFadeIn","setIsFadeIn","currentSlide","setCurrentSlide","setTimeout","slide","Math","ceil","className","useResponsive","useTheme","matches","xs","useMediaQuery","breakpoints","up","sm","md","lg","xl","responsiveValues","findLast","breakpoint","keys","About","projectSection","React","useRef","fetchByMediaQuery","ref","Container","Grid","container","spacing","item","Card","raised","CardMedia","image","about","CardContent","Typography","variant","color","component","align","App","classes","ThemeProvider","AppBar","position","Toolbar","licenseKey","process","REACT_APP_FULLPAGE_LICENSE","render","Wrapper","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sQAcoBA,QACW,cAA7BC,OAAOC,SAASC,UAEgB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC1B,2D,qFCbSC,EAAQC,YAAoBC,YAAY,CACnDC,WAAY,CACVC,WAAY,uBAEdC,QAAS,CACPC,KAAM,OACNC,QAAS,CACPC,KAAM,uBAERC,WAAY,CACVC,MAAO,+BAKAC,EAAYC,aAAW,kBAAMC,YAAa,CACrDC,MAAO,CACLC,SAAU,Q,cCpBC,SAASC,IAAc,IAAD,EACHC,oBAAS,GADN,mBAC5BC,EAD4B,KAClBC,EADkB,OAEKF,mBAAS,IAFd,mBAE5BG,EAF4B,KAEdC,EAFc,KAcnC,OAVAC,YAAW,WACT,IAAMC,EAAQH,EAAe,GAE3BC,EADEE,EAAQ,EACM,GAEAA,GAElBJ,GAAaD,KACZ,MAGD,gCACgC,IAA5BM,KAAKC,KAAKL,GACR,qBAAKM,UAAYR,EAAW,oBAAsB,qBAAlD,qCAGA,KAE0B,IAA5BM,KAAKC,KAAKL,GACR,qBAAKM,UAAYR,EAAW,oBAAsB,qBAAlD,sCAGA,Q,kDC9BK,MAA0B,mC,wBC+B1BS,EArBO,WACpB,IAAM3B,EAAQ4B,cAERC,EAAU,CACdC,GAAIC,YAAc/B,EAAMgC,YAAYC,GAAG,OACvCC,GAAIH,YAAc/B,EAAMgC,YAAYC,GAAG,OACvCE,GAAIJ,YAAc/B,EAAMgC,YAAYC,GAAG,OACvCG,GAAIL,YAAc/B,EAAMgC,YAAYC,GAAG,OACvCI,GAAIN,YAAc/B,EAAMgC,YAAYC,GAAG,QAGzC,OAAO,SAA8BK,GACnC,IAAMvC,EAAQwC,aACZ,SAACC,GAAD,OAA4BX,EAAQW,IAA+C,MAAhCF,EAAiBE,KACpExC,EAAMgC,YAAYS,MAGpB,OAAO1C,GAASuC,EAAiBvC,KCnBtB,SAAS2C,IACtB,IAAMC,EAAiBC,IAAMC,OAAO,MAC9BC,EAAoBnB,IAE1B,OACE,qBAAKoB,IAAKJ,EAAV,SACE,cAACK,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAASL,EAAkB,CAAEhB,GAAI,EAAGK,GAAI,IAAxD,SACE,cAACc,EAAA,EAAD,CAAMG,MAAI,EAAClB,GAAI,GAAIC,GAAI,EAAvB,SACE,eAACkB,EAAA,EAAD,CAAMC,QAAQ,EAAd,UACE,cAACC,EAAA,EAAD,CAAW7B,UAAU,gBAAgB8B,MAAOC,EAAO3C,MAAM,UACzD,cAAC4C,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,UAAUC,UAAU,IAAIC,MAAM,UAA7D,oY,MCVD,SAASC,IACtB,IAAMC,EAAUtD,IAEhB,OACE,eAACuD,EAAA,EAAD,CAAelE,MAAOA,EAAtB,UACE,cAACmE,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACE,cAACC,EAAA,EAAD,UACE,cAACV,EAAA,EAAD,CAAYC,QAAQ,KAAKlC,UAAWuC,EAAQnD,MAA5C,oBAKJ,cAAC,IAAD,CACEwD,WAAYC,6IAAYC,2BACxBC,OAAQ,kBACN,eAAC,IAAcC,QAAf,WACE,qBAAKhD,UAAU,sBAAf,SACE,cAAC,EAAD,MAEF,qBAAKA,UAAU,2BAAf,SACE,cAAC,EAAD,MAEF,qBAAKA,UAAU,iCCzB3BiD,IAASF,OAAO,cAAC,EAAD,IAASG,SAASC,eAAe,SPoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.eb5c853a.chunk.js","sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable no-param-reassign */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n  // [::1] is the IPv6 localhost address.\n  || window.location.hostname === '[::1]'\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  || window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n  ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n            + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  createTheme, responsiveFontSizes, makeStyles, createStyles,\n} from '@material-ui/core/styles';\n\n/**\n * Theme\n */\nexport const theme = responsiveFontSizes(createTheme({\n  typography: {\n    fontFamily: 'Comic Neue, cursive',\n  },\n  palette: {\n    type: 'dark',\n    primary: {\n      main: 'rgba(51, 29, 21, 1)',\n    },\n    background: {\n      paper: 'rgba(60, 179, 113, 0.2)',\n    },\n  },\n}));\n\nexport const useStyles = makeStyles(() => createStyles({\n  title: {\n    flexGrow: 1,\n  },\n}));\n","import './IntroTexts.css';\n\nimport React, { useState } from 'react';\n\nexport default function IntroTexts() {\n  const [isFadeIn, setIsFadeIn] = useState(true);\n  const [currentSlide, setCurrentSlide] = useState(0.5);\n\n  setTimeout(() => {\n    const slide = currentSlide + 0.5;\n    if (slide > 2) {\n      setCurrentSlide(0.5);\n    } else {\n      setCurrentSlide(slide);\n    }\n    setIsFadeIn(!isFadeIn);\n  }, 1500);\n\n  return (\n    <div>\n      { Math.ceil(currentSlide) === 1\n        ? <div className={ isFadeIn ? 'intro-text fadeIn' : 'intro-text fadeOut' }>\n            HI! I AM APOORVA SHARMA\n          </div>\n        : null\n      }\n      { Math.ceil(currentSlide) === 2\n        ? <div className={ isFadeIn ? 'intro-text fadeIn' : 'intro-text fadeOut' }>\n        ASPIRING PRODUCT MANAGER\n      </div>\n        : null\n      }\n    </div>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/about.486366cb.jpeg\";","import { useTheme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { findLast } from 'ramda';\n\ntype Breakpoint = 'xs' | 'sm' | 'md' | 'lg' | 'xl'\n\ntype ResponsiveValues<P> = {\n  [key in Breakpoint]?: P\n}\n\nconst useResponsive = () => {\n  const theme = useTheme();\n\n  const matches = {\n    xs: useMediaQuery(theme.breakpoints.up('xs')),\n    sm: useMediaQuery(theme.breakpoints.up('sm')),\n    md: useMediaQuery(theme.breakpoints.up('md')),\n    lg: useMediaQuery(theme.breakpoints.up('lg')),\n    xl: useMediaQuery(theme.breakpoints.up('xl')),\n  };\n\n  return function fetchByMediaQuery<P>(responsiveValues: ResponsiveValues<P>) {\n    const match = findLast(\n      (breakpoint: Breakpoint) => matches[breakpoint] && responsiveValues[breakpoint] != null,\n      theme.breakpoints.keys,\n    );\n\n    return match && responsiveValues[match];\n  };\n};\n\nexport default useResponsive;\n","import './About.css';\nimport {\n  Card, CardContent, CardMedia, Container, Grid, Typography,\n} from '@material-ui/core';\nimport React from 'react';\nimport about from '../assets/images/about.jpeg';\nimport useResponsive from '../hooks/useResponsive';\n\nexport default function About() {\n  const projectSection = React.useRef(null);\n  const fetchByMediaQuery = useResponsive();\n\n  return (\n    <div ref={projectSection}>\n      <Container>\n        <Grid container spacing={fetchByMediaQuery({ xs: 2, md: 5 })}>\n          <Grid item sm={12} md={6}>\n            <Card raised={true}>\n              <CardMedia className=\"project-media\" image={about} title=\"about\" />\n              <CardContent>\n                <Typography variant=\"h5\" color=\"primary\" component=\"p\" align=\"justify\">\n                  I am a Software Engineer, and I enjoy coding. However, even more than the\n                  implementation of the logic for code, I enjoyed interacting with stakeholders to\n                  collect requirements for the applications I built, and laying out the\n                  user-centred design specifications. I thrived when dealing with ambiguity and\n                  defining the user experience for the products I developed.\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n","import ReactFullpage from '@fullpage/react-fullpage';\nimport {\n  AppBar, ThemeProvider, Toolbar, Typography,\n} from '@material-ui/core';\nimport React from 'react';\nimport { theme, useStyles } from './theme';\nimport IntroTexts from './components/IntroTexts';\nimport About from './components/About';\nimport './App.css';\n\nexport default function App() {\n  const classes = useStyles();\n\n  return (\n    <ThemeProvider theme={theme}>\n      <AppBar position=\"sticky\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Me\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <ReactFullpage\n        licenseKey={process.env.REACT_APP_FULLPAGE_LICENSE}\n        render={() => (\n          <ReactFullpage.Wrapper>\n            <div className=\"section banner home\">\n              <IntroTexts />\n            </div>\n            <div className=\"section banner section-1\">\n              <About />\n            </div>\n            <div className=\"section banner foot\" />\n          </ReactFullpage.Wrapper>\n        )}\n      />\n    </ThemeProvider>\n  );\n}\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}